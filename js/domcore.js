//
// DO NOT EDIT.
// This file was generated by idl2domjs from src/idl/domcore.idl
//


//
// Interface Event
//

// Constants defined by Event
const CAPTURING_PHASE = 1;
const AT_TARGET = 2;
const BUBBLING_PHASE = 3;

defineLazyProperty(global, "Event", function() {
    return idl.Event.publicInterface;
}, true);

defineLazyProperty(idl, "Event", function() {
    return new IDLInterface({
        name: "Event",
        constructor: function Event(
                                type,
                                eventInitDict)
        {
            return wrap(new impl.Event(
                               String(type),
                               OptionalEventInit(eventInitDict)));
        },
        constants: {
            CAPTURING_PHASE: CAPTURING_PHASE,
            AT_TARGET: AT_TARGET,
            BUBBLING_PHASE: BUBBLING_PHASE,
        },
        members: {
            get type() {
                return unwrap(this).type;
            },

            get target() {
                return wrap(unwrap(this).target);
            },

            get currentTarget() {
                return wrap(unwrap(this).currentTarget);
            },

            get eventPhase() {
                return unwrap(this).eventPhase;
            },

            stopPropagation: function stopPropagation() {
                unwrap(this).stopPropagation();
            },

            stopImmediatePropagation: function stopImmediatePropagation() {
                unwrap(this).stopImmediatePropagation();
            },

            get bubbles() {
                return unwrap(this).bubbles;
            },

            get cancelable() {
                return unwrap(this).cancelable;
            },

            preventDefault: function preventDefault() {
                unwrap(this).preventDefault();
            },

            get defaultPrevented() {
                return unwrap(this).defaultPrevented;
            },

            get isTrusted() {
                return unwrap(this).isTrusted;
            },

            get timeStamp() {
                return unwrap(this).timeStamp;
            },

            initEvent: function initEvent(
                                    type,
                                    bubbles,
                                    cancelable)
            {
                unwrap(this).initEvent(
                    String(type),
                    Boolean(bubbles),
                    Boolean(cancelable));
            },

        },
    });
});

//
// Dictionary EventInit
//

function EventInit(o) {
    var rv = O.create(EventInit.prototype);
    if ('bubbles' in o) rv['bubbles'] = Boolean(o['bubbles']);
    if ('cancelable' in o) rv['cancelable'] = Boolean(o['cancelable']);
    return rv;
}
function OptionalEventInit(o) {
    return (o === undefined) ? undefined : EventInit(o);
}
EventInit.prototype = {};

//
// Interface CustomEvent
//

defineLazyProperty(global, "CustomEvent", function() {
    return idl.CustomEvent.publicInterface;
}, true);

defineLazyProperty(idl, "CustomEvent", function() {
    return new IDLInterface({
        name: "CustomEvent",
        superclass: idl.Event,
        constructor: function CustomEvent(
                                type,
                                eventInitDict)
        {
            return wrap(new impl.CustomEvent(
                               String(type),
                               OptionalCustomEventInit(eventInitDict)));
        },
        members: {
            get detail() {
                return unwrap(this).detail;
            },

        },
    });
});

//
// Dictionary CustomEventInit
//

function CustomEventInit(o) {
    var rv = O.create(CustomEventInit.prototype);
    if ('bubbles' in o) rv['bubbles'] = Boolean(o['bubbles']);
    if ('cancelable' in o) rv['cancelable'] = Boolean(o['cancelable']);
    if ('detail' in o) rv['detail'] = o['detail'];
    return rv;
}
function OptionalCustomEventInit(o) {
    return (o === undefined) ? undefined : CustomEventInit(o);
}
CustomEventInit.prototype = O.create(EventInit.prototype);

//
// Interface EventTarget
//

defineLazyProperty(global, "EventTarget", function() {
    return idl.EventTarget.publicInterface;
}, true);

defineLazyProperty(idl, "EventTarget", function() {
    return new IDLInterface({
        name: "EventTarget",
        members: {
            addEventListener: function addEventListener(
                                    type,
                                    listener,
                                    capture)
            {
                unwrap(this).addEventListener(
                    String(type),
                    toCallbackOrNull(listener),
                    OptionalBoolean(capture));
            },

            removeEventListener: function removeEventListener(
                                    type,
                                    listener,
                                    capture)
            {
                unwrap(this).removeEventListener(
                    String(type),
                    toCallbackOrNull(listener),
                    OptionalBoolean(capture));
            },

            dispatchEvent: function dispatchEvent(event) {
                return unwrap(this).dispatchEvent(unwrap(event));
            },

        },
    });
});

//
// Interface Node
//

// Constants defined by Node
const ELEMENT_NODE = 1;
const ATTRIBUTE_NODE = 2;
const TEXT_NODE = 3;
const CDATA_SECTION_NODE = 4;
const ENTITY_REFERENCE_NODE = 5;
const ENTITY_NODE = 6;
const PROCESSING_INSTRUCTION_NODE = 7;
const COMMENT_NODE = 8;
const DOCUMENT_NODE = 9;
const DOCUMENT_TYPE_NODE = 10;
const DOCUMENT_FRAGMENT_NODE = 11;
const NOTATION_NODE = 12;
const DOCUMENT_POSITION_DISCONNECTED = 0x01;
const DOCUMENT_POSITION_PRECEDING = 0x02;
const DOCUMENT_POSITION_FOLLOWING = 0x04;
const DOCUMENT_POSITION_CONTAINS = 0x08;
const DOCUMENT_POSITION_CONTAINED_BY = 0x10;
const DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 0x20;

defineLazyProperty(global, "Node", function() {
    return idl.Node.publicInterface;
}, true);

defineLazyProperty(idl, "Node", function() {
    return new IDLInterface({
        name: "Node",
        superclass: idl.EventTarget,
        constants: {
            ELEMENT_NODE: ELEMENT_NODE,
            ATTRIBUTE_NODE: ATTRIBUTE_NODE,
            TEXT_NODE: TEXT_NODE,
            CDATA_SECTION_NODE: CDATA_SECTION_NODE,
            ENTITY_REFERENCE_NODE: ENTITY_REFERENCE_NODE,
            ENTITY_NODE: ENTITY_NODE,
            PROCESSING_INSTRUCTION_NODE: PROCESSING_INSTRUCTION_NODE,
            COMMENT_NODE: COMMENT_NODE,
            DOCUMENT_NODE: DOCUMENT_NODE,
            DOCUMENT_TYPE_NODE: DOCUMENT_TYPE_NODE,
            DOCUMENT_FRAGMENT_NODE: DOCUMENT_FRAGMENT_NODE,
            NOTATION_NODE: NOTATION_NODE,
            DOCUMENT_POSITION_DISCONNECTED: DOCUMENT_POSITION_DISCONNECTED,
            DOCUMENT_POSITION_PRECEDING: DOCUMENT_POSITION_PRECEDING,
            DOCUMENT_POSITION_FOLLOWING: DOCUMENT_POSITION_FOLLOWING,
            DOCUMENT_POSITION_CONTAINS: DOCUMENT_POSITION_CONTAINS,
            DOCUMENT_POSITION_CONTAINED_BY: DOCUMENT_POSITION_CONTAINED_BY,
            DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC,
        },
        members: {
            get nodeType() {
                return unwrap(this).nodeType;
            },

            get nodeName() {
                return unwrap(this).nodeName;
            },

            get baseURI() {
                return unwrap(this).baseURI;
            },

            get ownerDocument() {
                return wrap(unwrap(this).ownerDocument);
            },

            get parentNode() {
                return wrap(unwrap(this).parentNode);
            },

            get parentElement() {
                return wrap(unwrap(this).parentElement);
            },

            hasChildNodes: function hasChildNodes() {
                return unwrap(this).hasChildNodes();
            },

            get childNodes() {
                return wrap(unwrap(this).childNodes);
            },

            get firstChild() {
                return wrap(unwrap(this).firstChild);
            },

            get lastChild() {
                return wrap(unwrap(this).lastChild);
            },

            get previousSibling() {
                return wrap(unwrap(this).previousSibling);
            },

            get nextSibling() {
                return wrap(unwrap(this).nextSibling);
            },

            compareDocumentPosition: function compareDocumentPosition(other) {
                return unwrap(this).compareDocumentPosition(unwrap(other));
            },

            get nodeValue() {
                return unwrap(this).nodeValue;
            },
            set nodeValue(newval) {
                unwrap(this).nodeValue = StringOrNull(newval);
            },

            get textContent() {
                return unwrap(this).textContent;
            },
            set textContent(newval) {
                unwrap(this).textContent = StringOrNull(newval);
            },

            insertBefore: function insertBefore(
                                    newChild,
                                    refChild)
            {
                return wrap(unwrap(this).insertBefore(
                    unwrap(newChild),
                    unwrapOrNull(refChild)));
            },

            replaceChild: function replaceChild(
                                    newChild,
                                    oldChild)
            {
                return wrap(unwrap(this).replaceChild(
                    unwrap(newChild),
                    unwrap(oldChild)));
            },

            removeChild: function removeChild(oldChild) {
                return wrap(unwrap(this).removeChild(unwrap(oldChild)));
            },

            appendChild: function appendChild(newChild) {
                return wrap(unwrap(this).appendChild(unwrap(newChild)));
            },

            cloneNode: function cloneNode(deep) {
                return wrap(unwrap(this).cloneNode(Boolean(deep)));
            },

            isSameNode: function isSameNode(node) {
                return unwrap(this).isSameNode(unwrapOrNull(node));
            },

            isEqualNode: function isEqualNode(node) {
                return unwrap(this).isEqualNode(unwrapOrNull(node));
            },

            lookupPrefix: function lookupPrefix(namespace) {
                return unwrap(this).lookupPrefix(StringOrEmpty(namespace));
            },

            lookupNamespaceURI: function lookupNamespaceURI(prefix) {
                return unwrap(this).lookupNamespaceURI(StringOrNull(prefix));
            },

            isDefaultNamespace: function isDefaultNamespace(namespace) {
                return unwrap(this).isDefaultNamespace(StringOrEmpty(namespace));
            },

        },
    });
});

//
// Interface DocumentFragment
//

defineLazyProperty(global, "DocumentFragment", function() {
    return idl.DocumentFragment.publicInterface;
}, true);

defineLazyProperty(idl, "DocumentFragment", function() {
    return new IDLInterface({
        name: "DocumentFragment",
        superclass: idl.Node,
        members: {
        },
    });
});

//
// Interface Document
//

defineLazyProperty(global, "Document", function() {
    return idl.Document.publicInterface;
}, true);

defineLazyProperty(idl, "Document", function() {
    return new IDLInterface({
        name: "Document",
        superclass: idl.Node,
        members: {
            _setMutationHandler: function _setMutationHandler(handler) {
                unwrap(this)._setMutationHandler(toCallback(handler));
            },

            _dispatchRendererEvent: function _dispatchRendererEvent(
                                    target,
                                    type,
                                    details)
            {
                unwrap(this)._dispatchRendererEvent(
                    toULong(target),
                    String(type),
                    EventInit(details));
            },

            get implementation() {
                return wrap(unwrap(this).implementation);
            },

            get documentURI() {
                return unwrap(this).documentURI;
            },
            set documentURI(newval) {
                unwrap(this).documentURI = String(newval);
            },

            get compatMode() {
                return unwrap(this).compatMode;
            },

            get doctype() {
                return wrap(unwrap(this).doctype);
            },

            get documentElement() {
                return wrap(unwrap(this).documentElement);
            },

            getElementsByTagName: function getElementsByTagName(qualifiedName) {
                return wrap(unwrap(this).getElementsByTagName(String(qualifiedName)));
            },

            getElementsByTagNameNS: function getElementsByTagNameNS(
                                    namespace,
                                    localName)
            {
                return wrap(unwrap(this).getElementsByTagNameNS(
                    String(namespace),
                    String(localName)));
            },

            getElementsByClassName: function getElementsByClassName(classNames) {
                return wrap(unwrap(this).getElementsByClassName(String(classNames)));
            },

            getElementById: function getElementById(elementId) {
                return wrap(unwrap(this).getElementById(String(elementId)));
            },

            createElement: function createElement(localName) {
                return wrap(unwrap(this).createElement(StringOrEmpty(localName)));
            },

            createElementNS: function createElementNS(
                                    namespace,
                                    qualifiedName)
            {
                return wrap(unwrap(this).createElementNS(
                    String(namespace),
                    String(qualifiedName)));
            },

            createDocumentFragment: function createDocumentFragment() {
                return wrap(unwrap(this).createDocumentFragment());
            },

            createTextNode: function createTextNode(data) {
                return wrap(unwrap(this).createTextNode(String(data)));
            },

            createComment: function createComment(data) {
                return wrap(unwrap(this).createComment(String(data)));
            },

            createProcessingInstruction: function createProcessingInstruction(
                                    target,
                                    data)
            {
                return wrap(unwrap(this).createProcessingInstruction(
                    String(target),
                    String(data)));
            },

            importNode: function importNode(
                                    node,
                                    deep)
            {
                return wrap(unwrap(this).importNode(
                    unwrap(node),
                    Boolean(deep)));
            },

            adoptNode: function adoptNode(node) {
                return wrap(unwrap(this).adoptNode(unwrap(node)));
            },

            createEvent: function createEvent(eventInterfaceName) {
                return wrap(unwrap(this).createEvent(String(eventInterfaceName)));
            },

            get URL() {
                return unwrap(this).URL;
            },

            get domain() {
                return unwrap(this).domain;
            },
            set domain(newval) {
                unwrap(this).domain = String(newval);
            },

            get referrer() {
                return unwrap(this).referrer;
            },

            get cookie() {
                return unwrap(this).cookie;
            },
            set cookie(newval) {
                unwrap(this).cookie = String(newval);
            },

            get lastModified() {
                return unwrap(this).lastModified;
            },

            get readyState() {
                return unwrap(this).readyState;
            },

            get title() {
                return unwrap(this).title;
            },
            set title(newval) {
                unwrap(this).title = String(newval);
            },

            get dir() {
                return unwrap(this).dir;
            },
            set dir(newval) {
                unwrap(this).dir = String(newval);
            },

            get body() {
                return wrap(unwrap(this).body);
            },
            set body(newval) {
                unwrap(this).body = unwrapOrNull(newval);
            },

            get head() {
                return wrap(unwrap(this).head);
            },

            get images() {
                return wrap(unwrap(this).images);
            },

            get embeds() {
                return wrap(unwrap(this).embeds);
            },

            get plugins() {
                return wrap(unwrap(this).plugins);
            },

            get links() {
                return wrap(unwrap(this).links);
            },

            get forms() {
                return wrap(unwrap(this).forms);
            },

            get scripts() {
                return wrap(unwrap(this).scripts);
            },

            getElementsByName: function getElementsByName(elementName) {
                return wrap(unwrap(this).getElementsByName(String(elementName)));
            },

            get innerHTML() {
                return unwrap(this).innerHTML;
            },
            set innerHTML(newval) {
                unwrap(this).innerHTML = String(newval);
            },

            write: function write(text /*...*/) {
                var context = unwrap(this);
                var args = [];
                for(var i = 0; i < arguments.length; i++) {
                    push(args, String(arguments[i]));
                }
                apply(context.write, context, args);
            },

            writeln: function writeln(text /*...*/) {
                var context = unwrap(this);
                var args = [];
                for(var i = 0; i < arguments.length; i++) {
                    push(args, String(arguments[i]));
                }
                apply(context.writeln, context, args);
            },

            get defaultView() {
                return wrap(unwrap(this).defaultView);
            },

            get onabort() {
                return unwrap(this).onabort;
            },
            set onabort(newval) {
                unwrap(this).onabort = toCallbackOrNull(newval);
            },

            get onblur() {
                return unwrap(this).onblur;
            },
            set onblur(newval) {
                unwrap(this).onblur = toCallbackOrNull(newval);
            },

            get oncanplay() {
                return unwrap(this).oncanplay;
            },
            set oncanplay(newval) {
                unwrap(this).oncanplay = toCallbackOrNull(newval);
            },

            get oncanplaythrough() {
                return unwrap(this).oncanplaythrough;
            },
            set oncanplaythrough(newval) {
                unwrap(this).oncanplaythrough = toCallbackOrNull(newval);
            },

            get onchange() {
                return unwrap(this).onchange;
            },
            set onchange(newval) {
                unwrap(this).onchange = toCallbackOrNull(newval);
            },

            get onclick() {
                return unwrap(this).onclick;
            },
            set onclick(newval) {
                unwrap(this).onclick = toCallbackOrNull(newval);
            },

            get oncontextmenu() {
                return unwrap(this).oncontextmenu;
            },
            set oncontextmenu(newval) {
                unwrap(this).oncontextmenu = toCallbackOrNull(newval);
            },

            get oncuechange() {
                return unwrap(this).oncuechange;
            },
            set oncuechange(newval) {
                unwrap(this).oncuechange = toCallbackOrNull(newval);
            },

            get ondblclick() {
                return unwrap(this).ondblclick;
            },
            set ondblclick(newval) {
                unwrap(this).ondblclick = toCallbackOrNull(newval);
            },

            get ondrag() {
                return unwrap(this).ondrag;
            },
            set ondrag(newval) {
                unwrap(this).ondrag = toCallbackOrNull(newval);
            },

            get ondragend() {
                return unwrap(this).ondragend;
            },
            set ondragend(newval) {
                unwrap(this).ondragend = toCallbackOrNull(newval);
            },

            get ondragenter() {
                return unwrap(this).ondragenter;
            },
            set ondragenter(newval) {
                unwrap(this).ondragenter = toCallbackOrNull(newval);
            },

            get ondragleave() {
                return unwrap(this).ondragleave;
            },
            set ondragleave(newval) {
                unwrap(this).ondragleave = toCallbackOrNull(newval);
            },

            get ondragover() {
                return unwrap(this).ondragover;
            },
            set ondragover(newval) {
                unwrap(this).ondragover = toCallbackOrNull(newval);
            },

            get ondragstart() {
                return unwrap(this).ondragstart;
            },
            set ondragstart(newval) {
                unwrap(this).ondragstart = toCallbackOrNull(newval);
            },

            get ondrop() {
                return unwrap(this).ondrop;
            },
            set ondrop(newval) {
                unwrap(this).ondrop = toCallbackOrNull(newval);
            },

            get ondurationchange() {
                return unwrap(this).ondurationchange;
            },
            set ondurationchange(newval) {
                unwrap(this).ondurationchange = toCallbackOrNull(newval);
            },

            get onemptied() {
                return unwrap(this).onemptied;
            },
            set onemptied(newval) {
                unwrap(this).onemptied = toCallbackOrNull(newval);
            },

            get onended() {
                return unwrap(this).onended;
            },
            set onended(newval) {
                unwrap(this).onended = toCallbackOrNull(newval);
            },

            get onerror() {
                return unwrap(this).onerror;
            },
            set onerror(newval) {
                unwrap(this).onerror = toCallbackOrNull(newval);
            },

            get onfocus() {
                return unwrap(this).onfocus;
            },
            set onfocus(newval) {
                unwrap(this).onfocus = toCallbackOrNull(newval);
            },

            get oninput() {
                return unwrap(this).oninput;
            },
            set oninput(newval) {
                unwrap(this).oninput = toCallbackOrNull(newval);
            },

            get oninvalid() {
                return unwrap(this).oninvalid;
            },
            set oninvalid(newval) {
                unwrap(this).oninvalid = toCallbackOrNull(newval);
            },

            get onkeydown() {
                return unwrap(this).onkeydown;
            },
            set onkeydown(newval) {
                unwrap(this).onkeydown = toCallbackOrNull(newval);
            },

            get onkeypress() {
                return unwrap(this).onkeypress;
            },
            set onkeypress(newval) {
                unwrap(this).onkeypress = toCallbackOrNull(newval);
            },

            get onkeyup() {
                return unwrap(this).onkeyup;
            },
            set onkeyup(newval) {
                unwrap(this).onkeyup = toCallbackOrNull(newval);
            },

            get onload() {
                return unwrap(this).onload;
            },
            set onload(newval) {
                unwrap(this).onload = toCallbackOrNull(newval);
            },

            get onloadeddata() {
                return unwrap(this).onloadeddata;
            },
            set onloadeddata(newval) {
                unwrap(this).onloadeddata = toCallbackOrNull(newval);
            },

            get onloadedmetadata() {
                return unwrap(this).onloadedmetadata;
            },
            set onloadedmetadata(newval) {
                unwrap(this).onloadedmetadata = toCallbackOrNull(newval);
            },

            get onloadstart() {
                return unwrap(this).onloadstart;
            },
            set onloadstart(newval) {
                unwrap(this).onloadstart = toCallbackOrNull(newval);
            },

            get onmousedown() {
                return unwrap(this).onmousedown;
            },
            set onmousedown(newval) {
                unwrap(this).onmousedown = toCallbackOrNull(newval);
            },

            get onmousemove() {
                return unwrap(this).onmousemove;
            },
            set onmousemove(newval) {
                unwrap(this).onmousemove = toCallbackOrNull(newval);
            },

            get onmouseout() {
                return unwrap(this).onmouseout;
            },
            set onmouseout(newval) {
                unwrap(this).onmouseout = toCallbackOrNull(newval);
            },

            get onmouseover() {
                return unwrap(this).onmouseover;
            },
            set onmouseover(newval) {
                unwrap(this).onmouseover = toCallbackOrNull(newval);
            },

            get onmouseup() {
                return unwrap(this).onmouseup;
            },
            set onmouseup(newval) {
                unwrap(this).onmouseup = toCallbackOrNull(newval);
            },

            get onmousewheel() {
                return unwrap(this).onmousewheel;
            },
            set onmousewheel(newval) {
                unwrap(this).onmousewheel = toCallbackOrNull(newval);
            },

            get onpause() {
                return unwrap(this).onpause;
            },
            set onpause(newval) {
                unwrap(this).onpause = toCallbackOrNull(newval);
            },

            get onplay() {
                return unwrap(this).onplay;
            },
            set onplay(newval) {
                unwrap(this).onplay = toCallbackOrNull(newval);
            },

            get onplaying() {
                return unwrap(this).onplaying;
            },
            set onplaying(newval) {
                unwrap(this).onplaying = toCallbackOrNull(newval);
            },

            get onprogress() {
                return unwrap(this).onprogress;
            },
            set onprogress(newval) {
                unwrap(this).onprogress = toCallbackOrNull(newval);
            },

            get onratechange() {
                return unwrap(this).onratechange;
            },
            set onratechange(newval) {
                unwrap(this).onratechange = toCallbackOrNull(newval);
            },

            get onreadystatechange() {
                return unwrap(this).onreadystatechange;
            },
            set onreadystatechange(newval) {
                unwrap(this).onreadystatechange = toCallbackOrNull(newval);
            },

            get onreset() {
                return unwrap(this).onreset;
            },
            set onreset(newval) {
                unwrap(this).onreset = toCallbackOrNull(newval);
            },

            get onscroll() {
                return unwrap(this).onscroll;
            },
            set onscroll(newval) {
                unwrap(this).onscroll = toCallbackOrNull(newval);
            },

            get onseeked() {
                return unwrap(this).onseeked;
            },
            set onseeked(newval) {
                unwrap(this).onseeked = toCallbackOrNull(newval);
            },

            get onseeking() {
                return unwrap(this).onseeking;
            },
            set onseeking(newval) {
                unwrap(this).onseeking = toCallbackOrNull(newval);
            },

            get onselect() {
                return unwrap(this).onselect;
            },
            set onselect(newval) {
                unwrap(this).onselect = toCallbackOrNull(newval);
            },

            get onshow() {
                return unwrap(this).onshow;
            },
            set onshow(newval) {
                unwrap(this).onshow = toCallbackOrNull(newval);
            },

            get onstalled() {
                return unwrap(this).onstalled;
            },
            set onstalled(newval) {
                unwrap(this).onstalled = toCallbackOrNull(newval);
            },

            get onsubmit() {
                return unwrap(this).onsubmit;
            },
            set onsubmit(newval) {
                unwrap(this).onsubmit = toCallbackOrNull(newval);
            },

            get onsuspend() {
                return unwrap(this).onsuspend;
            },
            set onsuspend(newval) {
                unwrap(this).onsuspend = toCallbackOrNull(newval);
            },

            get ontimeupdate() {
                return unwrap(this).ontimeupdate;
            },
            set ontimeupdate(newval) {
                unwrap(this).ontimeupdate = toCallbackOrNull(newval);
            },

            get onvolumechange() {
                return unwrap(this).onvolumechange;
            },
            set onvolumechange(newval) {
                unwrap(this).onvolumechange = toCallbackOrNull(newval);
            },

            get onwaiting() {
                return unwrap(this).onwaiting;
            },
            set onwaiting(newval) {
                unwrap(this).onwaiting = toCallbackOrNull(newval);
            },

        },
    });
});

//
// Interface DOMImplementation
//

defineLazyProperty(global, "DOMImplementation", function() {
    return idl.DOMImplementation.publicInterface;
}, true);

defineLazyProperty(idl, "DOMImplementation", function() {
    return new IDLInterface({
        name: "DOMImplementation",
        members: {
            hasFeature: function hasFeature(
                                    feature,
                                    version)
            {
                return unwrap(this).hasFeature(
                    String(feature),
                    StringOrEmpty(version));
            },

            createDocumentType: function createDocumentType(
                                    qualifiedName,
                                    publicId,
                                    systemId)
            {
                return wrap(unwrap(this).createDocumentType(
                    StringOrEmpty(qualifiedName),
                    String(publicId),
                    String(systemId)));
            },

            createDocument: function createDocument(
                                    namespace,
                                    qualifiedName,
                                    doctype)
            {
                return wrap(unwrap(this).createDocument(
                    StringOrEmpty(namespace),
                    StringOrEmpty(qualifiedName),
                    unwrapOrNull(doctype)));
            },

            createHTMLDocument: function createHTMLDocument(title) {
                return wrap(unwrap(this).createHTMLDocument(String(title)));
            },

            mozSetOutputMutationHandler: function mozSetOutputMutationHandler(
                                    doc,
                                    handler)
            {
                unwrap(this).mozSetOutputMutationHandler(
                    unwrap(doc),
                    toCallback(handler));
            },

            mozGetInputMutationHandler: function mozGetInputMutationHandler(doc) {
                return unwrap(this).mozGetInputMutationHandler(unwrap(doc));
            },

            get mozHTMLParser() {
                return unwrap(this).mozHTMLParser;
            },

        },
    });
});

//
// Interface Element
//

defineLazyProperty(global, "Element", function() {
    return idl.Element.publicInterface;
}, true);

defineLazyProperty(idl, "Element", function() {
    return new IDLInterface({
        name: "Element",
        superclass: idl.Node,
        members: {
            get namespaceURI() {
                return unwrap(this).namespaceURI;
            },

            get prefix() {
                return unwrap(this).prefix;
            },

            get localName() {
                return unwrap(this).localName;
            },

            get tagName() {
                return unwrap(this).tagName;
            },

            get attributes() {
                return wrap(unwrap(this).attributes);
            },

            getAttribute: function getAttribute(qualifiedName) {
                return unwrap(this).getAttribute(String(qualifiedName));
            },

            getAttributeNS: function getAttributeNS(
                                    namespace,
                                    localName)
            {
                return unwrap(this).getAttributeNS(
                    String(namespace),
                    String(localName));
            },

            setAttribute: function setAttribute(
                                    qualifiedName,
                                    value)
            {
                unwrap(this).setAttribute(
                    String(qualifiedName),
                    String(value));
            },

            setAttributeNS: function setAttributeNS(
                                    namespace,
                                    qualifiedName,
                                    value)
            {
                unwrap(this).setAttributeNS(
                    String(namespace),
                    String(qualifiedName),
                    String(value));
            },

            removeAttribute: function removeAttribute(qualifiedName) {
                unwrap(this).removeAttribute(String(qualifiedName));
            },

            removeAttributeNS: function removeAttributeNS(
                                    namespace,
                                    localName)
            {
                unwrap(this).removeAttributeNS(
                    String(namespace),
                    String(localName));
            },

            hasAttribute: function hasAttribute(qualifiedName) {
                return unwrap(this).hasAttribute(String(qualifiedName));
            },

            hasAttributeNS: function hasAttributeNS(
                                    namespace,
                                    localName)
            {
                return unwrap(this).hasAttributeNS(
                    String(namespace),
                    String(localName));
            },

            getElementsByTagName: function getElementsByTagName(qualifiedName) {
                return wrap(unwrap(this).getElementsByTagName(String(qualifiedName)));
            },

            getElementsByTagNameNS: function getElementsByTagNameNS(
                                    namespace,
                                    localName)
            {
                return wrap(unwrap(this).getElementsByTagNameNS(
                    String(namespace),
                    String(localName)));
            },

            getElementsByClassName: function getElementsByClassName(classNames) {
                return wrap(unwrap(this).getElementsByClassName(String(classNames)));
            },

            get children() {
                return wrap(unwrap(this).children);
            },

            get firstElementChild() {
                return wrap(unwrap(this).firstElementChild);
            },

            get lastElementChild() {
                return wrap(unwrap(this).lastElementChild);
            },

            get previousElementSibling() {
                return wrap(unwrap(this).previousElementSibling);
            },

            get nextElementSibling() {
                return wrap(unwrap(this).nextElementSibling);
            },

            get childElementCount() {
                return unwrap(this).childElementCount;
            },

        },
    });
});

//
// Interface Attr
//

defineLazyProperty(global, "Attr", function() {
    return idl.Attr.publicInterface;
}, true);

defineLazyProperty(idl, "Attr", function() {
    return new IDLInterface({
        name: "Attr",
        members: {
            get namespaceURI() {
                return unwrap(this).namespaceURI;
            },

            get prefix() {
                return unwrap(this).prefix;
            },

            get localName() {
                return unwrap(this).localName;
            },

            get name() {
                return unwrap(this).name;
            },

            get value() {
                return unwrap(this).value;
            },
            set value(newval) {
                unwrap(this).value = String(newval);
            },

        },
    });
});

//
// Interface DocumentType
//

defineLazyProperty(global, "DocumentType", function() {
    return idl.DocumentType.publicInterface;
}, true);

defineLazyProperty(idl, "DocumentType", function() {
    return new IDLInterface({
        name: "DocumentType",
        superclass: idl.Node,
        members: {
            get name() {
                return unwrap(this).name;
            },

            get publicId() {
                return unwrap(this).publicId;
            },

            get systemId() {
                return unwrap(this).systemId;
            },

        },
    });
});

//
// Interface ProcessingInstruction
//

defineLazyProperty(global, "ProcessingInstruction", function() {
    return idl.ProcessingInstruction.publicInterface;
}, true);

defineLazyProperty(idl, "ProcessingInstruction", function() {
    return new IDLInterface({
        name: "ProcessingInstruction",
        superclass: idl.Node,
        members: {
            get target() {
                return unwrap(this).target;
            },

            get data() {
                return unwrap(this).data;
            },
            set data(newval) {
                unwrap(this).data = String(newval);
            },

        },
    });
});

//
// Interface CharacterData
//

defineLazyProperty(global, "CharacterData", function() {
    return idl.CharacterData.publicInterface;
}, true);

defineLazyProperty(idl, "CharacterData", function() {
    return new IDLInterface({
        name: "CharacterData",
        superclass: idl.Node,
        members: {
            get data() {
                return unwrap(this).data;
            },
            set data(newval) {
                unwrap(this).data = StringOrEmpty(newval);
            },

            get length() {
                return unwrap(this).length;
            },

            substringData: function substringData(
                                    offset,
                                    count)
            {
                return unwrap(this).substringData(
                    toULong(offset),
                    toULong(count));
            },

            appendData: function appendData(data) {
                unwrap(this).appendData(String(data));
            },

            insertData: function insertData(
                                    offset,
                                    data)
            {
                unwrap(this).insertData(
                    toULong(offset),
                    String(data));
            },

            deleteData: function deleteData(
                                    offset,
                                    count)
            {
                unwrap(this).deleteData(
                    toULong(offset),
                    toULong(count));
            },

            replaceData: function replaceData(
                                    offset,
                                    count,
                                    data)
            {
                unwrap(this).replaceData(
                    toULong(offset),
                    toULong(count),
                    String(data));
            },

        },
    });
});

//
// Interface Text
//

defineLazyProperty(global, "Text", function() {
    return idl.Text.publicInterface;
}, true);

defineLazyProperty(idl, "Text", function() {
    return new IDLInterface({
        name: "Text",
        superclass: idl.CharacterData,
        members: {
            splitText: function splitText(offset) {
                return wrap(unwrap(this).splitText(toULong(offset)));
            },

            get wholeText() {
                return unwrap(this).wholeText;
            },

            replaceWholeText: function replaceWholeText(data) {
                return wrap(unwrap(this).replaceWholeText(String(data)));
            },

        },
    });
});

//
// Interface Comment
//

defineLazyProperty(global, "Comment", function() {
    return idl.Comment.publicInterface;
}, true);

defineLazyProperty(idl, "Comment", function() {
    return new IDLInterface({
        name: "Comment",
        superclass: idl.CharacterData,
        members: {
        },
    });
});

//
// Interface NodeList
//

defineLazyProperty(global, "NodeList", function() {
    return idl.NodeList.publicInterface;
}, true);

defineLazyProperty(idl, "NodeList", function() {
    return new IDLInterface({
        name: "NodeList",
        proxyFactory: NodeListProxy,
        members: {
            item: function item(index) {
                return wrap(unwrap(this).item(toULong(index)));
            },

            get length() {
                return unwrap(this).length;
            },

        },
    });
});

//
// Interface HTMLCollection
//

defineLazyProperty(global, "HTMLCollection", function() {
    return idl.HTMLCollection.publicInterface;
}, true);

defineLazyProperty(idl, "HTMLCollection", function() {
    return new IDLInterface({
        name: "HTMLCollection",
        proxyFactory: HTMLCollectionProxy,
        members: {
            get length() {
                return unwrap(this).length;
            },

            item: function item(index) {
                return wrap(unwrap(this).item(toULong(index)));
            },

            namedItem: function namedItem(name) {
                return wrap(unwrap(this).namedItem(String(name)));
            },

        },
    });
});

//
// Interface DOMStringList
//

defineLazyProperty(global, "DOMStringList", function() {
    return idl.DOMStringList.publicInterface;
}, true);

defineLazyProperty(idl, "DOMStringList", function() {
    return new IDLInterface({
        name: "DOMStringList",
        proxyFactory: DOMStringListProxy,
        members: {
            get length() {
                return unwrap(this).length;
            },

            item: function item(index) {
                return unwrap(this).item(toULong(index));
            },

            contains: function contains(string) {
                return unwrap(this).contains(String(string));
            },

        },
    });
});

//
// Interface DOMTokenList
//

defineLazyProperty(global, "DOMTokenList", function() {
    return idl.DOMTokenList.publicInterface;
}, true);

defineLazyProperty(idl, "DOMTokenList", function() {
    return new IDLInterface({
        name: "DOMTokenList",
        proxyFactory: DOMTokenListProxy,
        members: {
            get length() {
                return unwrap(this).length;
            },

            item: function item(index) {
                return unwrap(this).item(toULong(index));
            },

            contains: function contains(token) {
                return unwrap(this).contains(String(token));
            },

            add: function add(token) {
                unwrap(this).add(String(token));
            },

            remove: function remove(token) {
                unwrap(this).remove(String(token));
            },

            toggle: function toggle(token) {
                return unwrap(this).toggle(String(token));
            },

            toString: function toString() {
                return unwrap(this).toString();
            },

        },
    });
});

//
// Interface DOMSettableTokenList
//

defineLazyProperty(global, "DOMSettableTokenList", function() {
    return idl.DOMSettableTokenList.publicInterface;
}, true);

defineLazyProperty(idl, "DOMSettableTokenList", function() {
    return new IDLInterface({
        name: "DOMSettableTokenList",
        superclass: idl.DOMTokenList,
        members: {
            get value() {
                return unwrap(this).value;
            },
            set value(newval) {
                unwrap(this).value = String(newval);
            },

        },
    });
});

defineLazyProperty(idl, "AttrArray", function() {
    return new IDLInterface({
        name: "AttrArray",
        proxyFactory: AttrArrayProxy,
    });
});
